phase0. 기본 환경 세팅
    
    #0-0. 프로젝트 생성
    npm create vite@latest react-todo -- --template react
    → (https://ko.vitejs.dev/guide/#scaffolding-your-first-vite-project)

    #0-1. TailwindCSS 설치

        #0-1-1. Tailwind, postcss, autoprefixer 설치
            npm install -D tailwindcss postcss autoprefixer
            npx tailwindcss init -p
            → (https://tailwindcss.com/docs/guides/vite)

        #0-1-2. tailwind.config.js 설정
            /** @type {import('tailwindcss').Config} */
            export default {
            content: [
                "./index.html",
                "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
                extend: {},
            },
            plugins: [],
            }

        #0-1-3. Tailwind 디렉티브 추가
            // index.css
            @tailwind base;
            @tailwind components;
            @tailwind utilities;

        #0-1-4. 적용 여부 테스트
            // App.jsx
            <h1 className="text-3xl font-bold underline">Hello world!</h1>
    
    #0-2. Vite의 기본 UI 제거, Todo 기본 UI 구현

    #0-3. 요구사항 분석
        Todo 조회 기능
            메인 페이지 접속 시 전체 Todo 목록이 조회됨

        Todo 등록 기능 
            Add Todo 버튼 선택 시 Modal 창 생성(React Portal)
            Title, Summary 작성 및 Category 선택 후 Add 버튼으로 등록 되도록 구현
            Add 버튼 선택 시 Modal이 닫히고 새롭게 등록된 Todo가 화면에 갱신됨

            Cancel 선택 시 Modal 창이 닫히고 등록이 되지 않아야함

        Todo 수정 기능
            각 Todo 우측의 연필 모양 선택 시 Modal창이 열리고,
            입력된 Todo의 내용이 기입된 폼이 열림

            내용 수정 후 Edit 선택 시 Todo 내용이 수정됨

        Todo 제거 기능
            X 버튼 선택 시 선택한 Todo가 제거됨

        Todo 필터링 기능
            카테고리에 맞게 Todo가 필터링됨

phase1. Todo CRUD 기능 구현

    #1-1. 기본 폴더 구조 생성
        src/
            components/ - 재사용 가능한 개별 컴포넌트들이 위치한 폴더
                ui/ - 범용적인 ui 컴포넌트
                todos/ - todo 도메인과 관련된 컴포넌트
            hooks/ - 커스텀 훅이 위치한 폴더
            constants/ - 공통적으로 사용되는 상수값들을 정의한 파일이 위치한 폴더
    
    #1-2. CSS 레이아웃 작성

    #1-3. Todo 조회 기능 구현

    #1-4. Todo 등록 기능 구현
        #1-4-1. React Portal을 활용한 Modal 기능 구현

        #1-4-2. 폼 입력 시 Validation 기능
            - title, summary 중에 하나라도 입력하지 않은 항목이 있을 경우 Add 버튼이 눌리지 않음
            - 하나라도 입력하지 않은 항목이 있을 경우 "모든 항목을 채워서 작성해주세요" 안내 문구가 출력됨

        #1-4-3. 등록이 완료되었을 경우 맨 아래에 새로 등록한 할일이 추가된다.

    #1-5. Todo 수정 기능 구현
        #1-5-1. TodoForm 재사용

        #1-5-2. Update Modal은 Update Todo, Update 버튼으로 변경되도록

    #1-6. Todo 제거 기능 구현
        #1-6-1. 휴지통 버튼 선택 시 선택한 Todo가 제거되도록

    #1-7. Todo 필터링 기능 구현
        #1-7-1. 우측 상단 선택박스로 카테고리에 맞게 필터링 되도록 구현

phase2. 리팩토링

    #2-1. useReducer, Context API 적용

    #2-2. ContextAPI를 App.jsx에서 분리